using System.Numerics;
using System.Text;
using Dahomey.Cbor;
using FluentAssertions.Extensions;

namespace SurrealDb.Net.Tests;

public abstract class BaseRecord
{
    public string? Name { get; set; }
}

public class Record<T> : BaseRecord
{
    public T? Value { get; set; }
}

public class RecordIdRecord : BaseRecord
{
    public RecordId? Id { get; set; }
}

public class ThingRecord : Record<RecordId> { }

public class StringRecord : Record<string> { }

public class LongRecord : Record<long?> { }

public class DecimalRecord : Record<decimal?> { }

public class FloatRecord : Record<float?> { }

public class DoubleRecord : Record<double?> { }

public class DurationRecord : Record<Duration> { }

public class TimeSpanRecord : Record<TimeSpan> { }

public class TimeOnlyRecord : Record<TimeOnly> { }

public class DateTimeRecord : Record<DateTime?> { }

public class DateOnlyRecord : Record<DateOnly?> { }

public class Vector2Record : Record<Vector2?> { }

public class Vector3Record : Record<Vector3?> { }

public class Vector4Record : Record<Vector4?> { }

public class NoneRecord : Record<None> { }

public class ParserTests
{
    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseRecordId(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/recordId.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<RecordIdRecord>("recordId");

        {
            var autoGeneratedRecord = records.First(r => r.Name == "auto-generated");
            autoGeneratedRecord.Should().NotBeNull();
            autoGeneratedRecord!.Id.Should().NotBeNull();
            autoGeneratedRecord!.Id!.Table.Should().Be("recordId");
            autoGeneratedRecord!.Id!.DeserializeId<string>().Should().BeNanoid();
        }

        {
            var stringRecord = records.First(r => r.Name == "string");
            stringRecord.Should().NotBeNull();
            stringRecord!.Id.Should().NotBeNull();
            stringRecord!.Id!.Table.Should().Be("recordId");
            stringRecord!.Id!.DeserializeId<string>().Should().Be("surrealdb");
        }

        {
            var numberRecord = records.First(r => r.Name == "number");
            numberRecord.Should().NotBeNull();
            numberRecord!.Id.Should().NotBeNull();
            numberRecord!.Id!.Table.Should().Be("recordId");
            numberRecord!.Id!.DeserializeId<int>().Should().Be(17493);
        }

        {
            var complexRecord = records.First(r => r.Name == "complex");
            complexRecord.Should().NotBeNull();
            complexRecord!.Id.Should().NotBeNull();
            complexRecord!.Id!.Table.Should().Be("recordId");
            complexRecord!
                .Id!.DeserializeId<string>()
                .Should()
                .Be("8424486b-85b3-4448-ac8d-5d51083391c7");
        }

        {
            var complex2Record = records.First(r => r.Name == "complex-2");
            complex2Record.Should().NotBeNull();
            complex2Record!.Id.Should().NotBeNull();
            complex2Record!.Id!.Table.Should().Be("recordId");
            complex2Record!
                .Id!.DeserializeId<string>()
                .Should()
                .Be("f47ac10b-58cc-4372-a567-0e02b2c3d479");
        }

        {
            var objectRecord = records.First(r => r.Name == "object");
            objectRecord.Should().NotBeNull();
            objectRecord!.Id.Should().NotBeNull();
            objectRecord!.Id!.Table.Should().Be("recordId");

            var idAsObject = objectRecord!.Id.DeserializeId<ObjectTableId>();
            var expectedObject = new ObjectTableId { Location = "London", Year = 2023 };

            idAsObject.Should().BeEquivalentTo(expectedObject);
        }

        {
            var arrayRecord = records.First(r => r.Name == "array");
            arrayRecord.Should().NotBeNull();
            arrayRecord!.Id.Should().NotBeNull();
            arrayRecord!.Id!.Table.Should().Be("recordId");

            var idAsObject = arrayRecord!.Id.DeserializeId<(string, int)>();
            var expectedObject = ("London", 2023);

            idAsObject.Should().BeEquivalentTo(expectedObject);
        }

        {
            var randRecord = records.First(r => r.Name == "rand");
            randRecord.Should().NotBeNull();
            randRecord!.Id.Should().NotBeNull();
            randRecord!.Id!.Table.ToString().Should().Be("recordId");
            randRecord!.Id!.DeserializeId<string>().ToString().Should().BeNanoid();
        }

        {
            var ulidRecord = records.First(r => r.Name == "ulid");
            ulidRecord.Should().NotBeNull();
            ulidRecord!.Id.Should().NotBeNull();
            ulidRecord!.Id!.Table.ToString().Should().Be("recordId");
            ulidRecord!.Id!.DeserializeId<string>().ToString().Should().BeUlid();
        }

        {
            var uuidRecord = records.First(r => r.Name == "uuid");
            uuidRecord.Should().NotBeNull();
            uuidRecord!.Id.Should().NotBeNull();
            uuidRecord!.Id!.Table.ToString().Should().Be("recordId");
            uuidRecord!.Id!.DeserializeId<string>().Should().BeUuid();
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseString(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/string.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<StringRecord>("string");

        {
            var noneRecord = records.First(r => r.Name == "none");
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().BeNull();
        }

        {
            var singleQuoteRecord = records.First(r => r.Name == "single-quote");
            singleQuoteRecord.Should().NotBeNull();
            singleQuoteRecord!.Value.Should().Be("Lorem ipsum dolor sit amet");
        }

        {
            var doubleQuoteRecord = records.First(r => r.Name == "double-quote");
            doubleQuoteRecord.Should().NotBeNull();
            doubleQuoteRecord!.Value.Should().Be("Lorem ipsum dolor sit amet");
        }

        {
            var unicodeRecord = records.First(r => r.Name == "unicode");
            unicodeRecord.Should().NotBeNull();
            unicodeRecord!.Value.Should().Be("I ❤️ SurrealDB");
        }

        {
            var expectedStringBuilder = new StringBuilder();
            expectedStringBuilder.AppendLine("This");
            expectedStringBuilder.AppendLine("is");
            expectedStringBuilder.AppendLine("over");
            expectedStringBuilder.AppendLine("multiple");
            expectedStringBuilder.Append("lines");

            string expected = expectedStringBuilder.ToString();

            var multilineRecord = records.First(r => r.Name == "multiline");
            multilineRecord.Should().NotBeNull();
            multilineRecord!.Value.Should().Be(expected);
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseLong(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/number.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<LongRecord>("number");

        {
            var noneRecord = records.First(r => r.Name == "none");
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().BeNull();
        }

        {
            var minRecord = records.First(r => r.Name == "min");
            minRecord.Should().NotBeNull();
            minRecord!.Value.Should().Be(-9223372036854775808);
        }

        {
            var maxRecord = records.First(r => r.Name == "max");
            maxRecord.Should().NotBeNull();
            maxRecord!.Value.Should().Be(9223372036854775807);
        }

        {
            var zeroRecord = records.First(r => r.Name == "zero");
            zeroRecord.Should().NotBeNull();
            zeroRecord!.Value.Should().Be(0);
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseDecimal(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/decimal.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<DecimalRecord>("decimal");

        {
            var noneRecord = records.First(r => r.Name == "none");
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().BeNull();
        }

        {
            var minRecord = records.First(r => r.Name == "min");
            minRecord.Should().NotBeNull();
            minRecord!.Value.Should().Be(-9223372036854775808);
        }

        {
            var maxRecord = records.First(r => r.Name == "max");
            maxRecord.Should().NotBeNull();
            maxRecord!.Value.Should().Be(9223372036854775807);
        }

        {
            var zeroRecord = records.First(r => r.Name == "zero");
            zeroRecord.Should().NotBeNull();
            zeroRecord!.Value.Should().Be(0);
        }

        {
            var decimalRecord = records.First(r => r.Name == "decimal");
            decimalRecord.Should().NotBeNull();
            decimalRecord!.Value.Should().Be(41.5m);
        }

        {
            var decimalPrecisionRecord = records.First(r => r.Name == "decimal-precision");
            decimalPrecisionRecord.Should().NotBeNull();
            decimalPrecisionRecord!
                .Value.Should()
                .Be(13.5719384719384719385639856394139476937756394756m);
        }

        {
            var floatRecord = records.First(r => r.Name == "float");
            floatRecord.Should().NotBeNull();

            decimal expected = 13.5719384719385m;
            floatRecord!.Value.Should().Be(expected);
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseFloat(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/decimal.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<FloatRecord>("decimal");

        {
            var noneRecord = records.First(r => r.Name == "none");
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().BeNull();
        }

        {
            var minRecord = records.First(r => r.Name == "min");
            minRecord.Should().NotBeNull();
            minRecord!.Value.Should().Be(-9223372036854775808);
        }

        {
            var maxRecord = records.First(r => r.Name == "max");
            maxRecord.Should().NotBeNull();
            maxRecord!.Value.Should().Be(9223372036854775807);
        }

        {
            var zeroRecord = records.First(r => r.Name == "zero");
            zeroRecord.Should().NotBeNull();
            zeroRecord!.Value.Should().Be(0);
        }

        {
            var decimalRecord = records.First(r => r.Name == "decimal");
            decimalRecord.Should().NotBeNull();
            decimalRecord!.Value.Should().Be(41.5f);
        }

        {
            var decimalPrecisionRecord = records.First(r => r.Name == "decimal-precision");
            decimalPrecisionRecord.Should().NotBeNull();
            decimalPrecisionRecord!
                .Value.Should()
                .Be(13.5719384719384719385639856394139476937756394756f);
        }

        {
            var floatRecord = records.First(r => r.Name == "float");
            floatRecord.Should().NotBeNull();
            floatRecord!.Value.Should().Be(13.571938471938473f);
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseDouble(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/decimal.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<DoubleRecord>("decimal");

        {
            var noneRecord = records.First(r => r.Name == "none");
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().BeNull();
        }

        {
            var minRecord = records.First(r => r.Name == "min");
            minRecord.Should().NotBeNull();
            minRecord!.Value.Should().Be(-9223372036854775808);
        }

        {
            var maxRecord = records.First(r => r.Name == "max");
            maxRecord.Should().NotBeNull();
            maxRecord!.Value.Should().Be(9223372036854775807);
        }

        {
            var zeroRecord = records.First(r => r.Name == "zero");
            zeroRecord.Should().NotBeNull();
            zeroRecord!.Value.Should().Be(0);
        }

        {
            var decimalRecord = records.First(r => r.Name == "decimal");
            decimalRecord.Should().NotBeNull();
            decimalRecord!.Value.Should().Be(41.5f);
        }

        {
            var decimalPrecisionRecord = records.First(r => r.Name == "decimal-precision");
            decimalPrecisionRecord.Should().NotBeNull();
            decimalPrecisionRecord!
                .Value.Should()
                .Be(13.5719384719384719385639856394139476937756394756d);
        }

        {
            var floatRecord = records.First(r => r.Name == "float");
            floatRecord.Should().NotBeNull();
            floatRecord!.Value.Should().Be(13.571938471938472d);
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseDuration(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/duration.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<DurationRecord>("duration");

        {
            var noneRecord = records.First(r => r.Name == "none");
            noneRecord.Should().NotBeNull();

            noneRecord!.Value.NanoSeconds.Should().Be(0);
            noneRecord!.Value.MilliSeconds.Should().Be(0);
            noneRecord!.Value.MicroSeconds.Should().Be(0);
            noneRecord!.Value.Seconds.Should().Be(0);
            noneRecord!.Value.Minutes.Should().Be(0);
            noneRecord!.Value.Hours.Should().Be(0);
            noneRecord!.Value.Days.Should().Be(0);
            noneRecord!.Value.Weeks.Should().Be(0);
            noneRecord!.Value.Years.Should().Be(0);
        }

        {
            var nanosecondRecord = records.First(r => r.Name == "nanosecond");
            nanosecondRecord.Should().NotBeNull();
            nanosecondRecord!.Value.NanoSeconds.Should().Be(2);
        }

        {
            var microsecondRecord = records.First(r => r.Name == "microsecond");
            microsecondRecord.Should().NotBeNull();
            microsecondRecord!.Value.MicroSeconds.Should().Be(3);
        }

        {
            var microsecondAliasRecord = records.First(r => r.Name == "microsecond-alias");
            microsecondAliasRecord.Should().NotBeNull();
            microsecondAliasRecord!.Value.MicroSeconds.Should().Be(4);
        }

        {
            var millisecondRecord = records.First(r => r.Name == "millisecond");
            millisecondRecord.Should().NotBeNull();
            millisecondRecord!.Value.MilliSeconds.Should().Be(50);
        }

        {
            var secondRecord = records.First(r => r.Name == "second");
            secondRecord.Should().NotBeNull();
            secondRecord!.Value.Seconds.Should().Be(7);
        }

        {
            var minuteRecord = records.First(r => r.Name == "minute");
            minuteRecord.Should().NotBeNull();
            minuteRecord!.Value.Minutes.Should().Be(5);
        }

        {
            var hourRecord = records.First(r => r.Name == "hour");
            hourRecord.Should().NotBeNull();
            hourRecord!.Value.Hours.Should().Be(1);
        }

        {
            var dayRecord = records.First(r => r.Name == "day");
            dayRecord.Should().NotBeNull();
            dayRecord!.Value.Days.Should().Be(6);
        }

        {
            var weekRecord = records.First(r => r.Name == "week");
            weekRecord.Should().NotBeNull();
            weekRecord!.Value.Weeks.Should().Be(28);
        }

        {
            var yearRecord = records.First(r => r.Name == "year");
            yearRecord.Should().NotBeNull();
            yearRecord!.Value.Years.Should().Be(12);
        }

        {
            var complexRecord = records.First(r => r.Name == "complex");
            complexRecord.Should().NotBeNull();
            complexRecord!.Value.MilliSeconds.Should().Be(350);
            complexRecord!.Value.Seconds.Should().Be(21);
            complexRecord!.Value.Minutes.Should().Be(30);
            complexRecord!.Value.Hours.Should().Be(1);
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseDurationAsTimeSpan(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/duration.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<TimeSpanRecord>("duration");

        {
            var noneRecord = records.First(r => r.Name == "none");
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.TotalSeconds.Should().Be(0);
        }

        {
            var nanosecondRecord = records.First(r => r.Name == "nanosecond");
            nanosecondRecord.Should().NotBeNull();
            nanosecondRecord!.Value.TotalNanoseconds().Should(); // TODO : Value = 2
        }

        {
            var microsecondRecord = records.First(r => r.Name == "microsecond");
            microsecondRecord.Should().NotBeNull();
            microsecondRecord!.Value.TotalMicroseconds().Should().Be(3);
        }

        {
            var microsecondAliasRecord = records.First(r => r.Name == "microsecond-alias");
            microsecondAliasRecord.Should().NotBeNull();
            microsecondAliasRecord!.Value.TotalMicroseconds().Should().Be(4);
        }

        {
            var millisecondRecord = records.First(r => r.Name == "millisecond");
            millisecondRecord.Should().NotBeNull();
            millisecondRecord!.Value.TotalMilliseconds.Should().Be(50);
        }

        {
            var secondRecord = records.First(r => r.Name == "second");
            secondRecord.Should().NotBeNull();
            secondRecord!.Value.TotalSeconds.Should().Be(7);
        }

        {
            var minuteRecord = records.First(r => r.Name == "minute");
            minuteRecord.Should().NotBeNull();
            minuteRecord!.Value.TotalMinutes.Should().Be(5);
        }

        {
            var hourRecord = records.First(r => r.Name == "hour");
            hourRecord.Should().NotBeNull();
            hourRecord!.Value.TotalHours.Should().Be(1);
        }

        {
            var dayRecord = records.First(r => r.Name == "day");
            dayRecord.Should().NotBeNull();
            dayRecord!.Value.TotalDays.Should().Be(6);
        }

        {
            var weekRecord = records.First(r => r.Name == "week");
            weekRecord.Should().NotBeNull();
            weekRecord!.Value.TotalDays.Should().Be(196);
        }

        {
            var yearRecord = records.First(r => r.Name == "year");
            yearRecord.Should().NotBeNull();
            yearRecord!.Value.TotalDays.Should().Be(4380);
        }

        {
            var complexRecord = records.First(r => r.Name == "complex");
            complexRecord.Should().NotBeNull();
            complexRecord!.Value.TotalSeconds.Should().Be(5421.35);
        }
    }

    [Theory(Skip = "Not supported")]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseDurationAsString(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/duration.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<StringRecord>("duration");

        {
            var noneRecord = records.First(r => r.Name == "none");
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().BeNull();
        }

        {
            var nanosecondRecord = records.First(r => r.Name == "nanosecond");
            nanosecondRecord.Should().NotBeNull();
            nanosecondRecord!.Value.Should().Be("2ns");
        }

        {
            var microsecondRecord = records.First(r => r.Name == "microsecond");
            microsecondRecord.Should().NotBeNull();
            microsecondRecord!.Value.Should().Be("3µs");
        }

        {
            var microsecondAliasRecord = records.First(r => r.Name == "microsecond-alias");
            microsecondAliasRecord.Should().NotBeNull();
            microsecondAliasRecord!.Value.Should().Be("4µs");
        }

        {
            var millisecondRecord = records.First(r => r.Name == "millisecond");
            millisecondRecord.Should().NotBeNull();
            millisecondRecord!.Value.Should().Be("50ms");
        }

        {
            var secondRecord = records.First(r => r.Name == "second");
            secondRecord.Should().NotBeNull();
            secondRecord!.Value.Should().Be("7s");
        }

        {
            var minuteRecord = records.First(r => r.Name == "minute");
            minuteRecord.Should().NotBeNull();
            minuteRecord!.Value.Should().Be("5m");
        }

        {
            var hourRecord = records.First(r => r.Name == "hour");
            hourRecord.Should().NotBeNull();
            hourRecord!.Value.Should().Be("1h");
        }

        {
            var dayRecord = records.First(r => r.Name == "day");
            dayRecord.Should().NotBeNull();
            dayRecord!.Value.Should().Be("6d");
        }

        {
            var weekRecord = records.First(r => r.Name == "week");
            weekRecord.Should().NotBeNull();
            weekRecord!.Value.Should().Be("28w");
        }

        {
            var yearRecord = records.First(r => r.Name == "year");
            yearRecord.Should().NotBeNull();
            yearRecord!.Value.Should().Be("12y");
        }

        {
            var complexRecord = records.First(r => r.Name == "complex");
            complexRecord.Should().NotBeNull();
            complexRecord!.Value.Should().Be("1h30m21s350ms");
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseTimeOnly(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/duration.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<TimeOnlyRecord>("duration");

        {
            var noneRecord = records.First(r => r.Name == "none");
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().Be(new TimeOnly());
        }

        {
            var nanosecondRecord = records.First(r => r.Name == "nanosecond");
            nanosecondRecord.Should().NotBeNull();
            nanosecondRecord!.Value.Should(); // TODO : Value = 2
        }

        {
            var microsecondRecord = records.First(r => r.Name == "microsecond");
            microsecondRecord.Should().NotBeNull();
            microsecondRecord!.Value.Should().Be(new TimeOnly(30)); // 30 ticks = 3 microseconds
        }

        {
            var microsecondAliasRecord = records.First(r => r.Name == "microsecond-alias");
            microsecondAliasRecord.Should().NotBeNull();
            microsecondAliasRecord!.Value.Should().Be(new TimeOnly(40)); // 40 ticks = 4 microseconds
        }

        {
            var millisecondRecord = records.First(r => r.Name == "millisecond");
            millisecondRecord.Should().NotBeNull();
            millisecondRecord!.Value.Should().Be(new TimeOnly(0, 0, 0, 50));
        }

        {
            var secondRecord = records.First(r => r.Name == "second");
            secondRecord.Should().NotBeNull();
            secondRecord!.Value.Should().Be(new TimeOnly(0, 0, 7));
        }

        {
            var minuteRecord = records.First(r => r.Name == "minute");
            minuteRecord.Should().NotBeNull();
            minuteRecord!.Value.Should().Be(new TimeOnly(0, 5));
        }

        {
            var hourRecord = records.First(r => r.Name == "hour");
            hourRecord.Should().NotBeNull();
            hourRecord!.Value.Should().Be(new TimeOnly(1, 0));
        }

        {
            var dayRecord = records.First(r => r.Name == "day");
            dayRecord.Should().NotBeNull();
            dayRecord!.Value.Should().Be(new TimeOnly());
        }

        {
            var weekRecord = records.First(r => r.Name == "week");
            weekRecord.Should().NotBeNull();
            weekRecord!.Value.Should().Be(new TimeOnly());
        }

        {
            var yearRecord = records.First(r => r.Name == "year");
            yearRecord.Should().NotBeNull();
            yearRecord!.Value.Should().Be(new TimeOnly());
        }

        {
            var complexRecord = records.First(r => r.Name == "complex");
            complexRecord.Should().NotBeNull();
            complexRecord!.Value.Should().Be(new TimeOnly(01, 30, 21, 350));
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseDateAsDateTime(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/datetime.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<DateTimeRecord>("datetime");

        {
            var noneRecord = records.First(r => r.Name == "none");
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().BeNull();
        }

        {
            var timeRecord = records.First(r => r.Name == "time");
            timeRecord.Should().NotBeNull();
            timeRecord!.Value.Should().Be(new DateTime(2022, 7, 3, 7, 18, 52));
        }

        {
            var nanoRecord = records.First(r => r.Name == "nano");
            nanoRecord.Should().NotBeNull();
            nanoRecord!
                .Value.Should()
                .Be(new DateTime(2022, 7, 3, 7, 18, 52).AddNanoseconds(841_147_000));
        }

        {
            var timezoneRecord = records.First(r => r.Name == "timezone");
            timezoneRecord.Should().NotBeNull();
            timezoneRecord!
                .Value.Should()
                .Be(
                    new DateTime(2022, 7, 3, 7, 18, 52)
                        .AddNanoseconds(841_147_000)
                        .WithOffset(TimeSpan.FromHours(2))
                        .UtcDateTime
                );
        }

        {
            var timePlusDurationRecord = records.First(r => r.Name == "time+duration");
            timePlusDurationRecord.Should().NotBeNull();
            timePlusDurationRecord!.Value.Should().Be(new DateTime(2022, 7, 17, 7, 18, 52));
        }

        {
            var nanoPlusDurationRecord = records.First(r => r.Name == "nano+duration");
            nanoPlusDurationRecord.Should().NotBeNull();
            nanoPlusDurationRecord!
                .Value.Should()
                .Be(new DateTime(2022, 7, 3, 8, 49, 14).AddNanoseconds(191_147_000));
        }

        {
            var fullNanoRecord = records.First(r => r.Name == "full-nano");
            fullNanoRecord.Should().NotBeNull();
            fullNanoRecord!
                .Value.Should()
                .Be(new DateTime(2022, 7, 3, 7, 18, 52).AddNanoseconds(123_456_789));
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseDateOnly(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/datetime.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        var records = await client.Select<DateOnlyRecord>("datetime");

        {
            var noneRecord = records.First(r => r.Name == "none");
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().BeNull();
        }

        {
            var timeRecord = records.First(r => r.Name == "time");
            timeRecord.Should().NotBeNull();
            timeRecord!.Value.Should().Be(new DateOnly(2022, 7, 3));
        }

        {
            var nanoRecord = records.First(r => r.Name == "nano");
            nanoRecord.Should().NotBeNull();
            nanoRecord!.Value.Should().Be(new DateOnly(2022, 7, 3));
        }

        {
            var timezoneRecord = records.First(r => r.Name == "timezone");
            timezoneRecord.Should().NotBeNull();
            timezoneRecord!.Value.Should().Be(new DateOnly(2022, 7, 3));
        }

        {
            var timePlusDurationRecord = records.First(r => r.Name == "time+duration");
            timePlusDurationRecord.Should().NotBeNull();
            timePlusDurationRecord!.Value.Should().Be(new DateOnly(2022, 7, 17));
        }

        {
            var nanoPlusDurationRecord = records.First(r => r.Name == "nano+duration");
            nanoPlusDurationRecord.Should().NotBeNull();
            nanoPlusDurationRecord!.Value.Should().Be(new DateOnly(2022, 7, 3));
        }

        {
            var fullNanoRecord = records.First(r => r.Name == "full-nano");
            fullNanoRecord.Should().NotBeNull();
            fullNanoRecord!.Value.Should().Be(new DateOnly(2022, 7, 3));
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseVector2(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/vector.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        {
            var noneRecord = await client.Select<Vector2Record>(("vector", "none"));
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().BeNull();
        }

        {
            Func<Task> act = async () => await client.Select<Vector2Record>(("vector", "empty"));

            await act.Should()
                .ThrowAsync<CborException>()
                .WithMessage("Expected a CBOR array with at least 2 elements");
        }

        {
            var vector2Record = await client.Select<Vector2Record>(("vector", "vector2"));
            vector2Record.Should().NotBeNull();
            vector2Record!.Value.Should().Be(new Vector2(2.5f, 0.5f));
        }

        {
            var vector3Record = await client.Select<Vector2Record>(("vector", "vector3"));
            vector3Record.Should().NotBeNull();
            vector3Record!.Value.Should().Be(new Vector2(4, 9));
        }

        {
            var vector4Record = await client.Select<Vector2Record>(("vector", "vector4"));
            vector4Record.Should().NotBeNull();
            vector4Record!.Value.Should().Be(new Vector2(2, 3));
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseVector3(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/vector.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        {
            var noneRecord = await client.Select<Vector3Record>(("vector", "none"));
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().BeNull();
        }

        {
            Func<Task> act = async () => await client.Select<Vector3Record>(("vector", "empty"));

            await act.Should()
                .ThrowAsync<CborException>()
                .WithMessage("Expected a CBOR array with at least 3 elements");
        }

        {
            Func<Task> act = async () => await client.Select<Vector3Record>(("vector", "vector2"));

            await act.Should()
                .ThrowAsync<CborException>()
                .WithMessage("Expected a CBOR array with at least 3 elements");
        }

        {
            var vector3Record = await client.Select<Vector3Record>(("vector", "vector3"));
            vector3Record.Should().NotBeNull();
            vector3Record!.Value.Should().Be(new Vector3(4, 9, 16));
        }

        {
            var vector4Record = await client.Select<Vector3Record>(("vector", "vector4"));
            vector4Record.Should().NotBeNull();
            vector4Record!.Value.Should().Be(new Vector3(2, 3, 4));
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseVector4(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/vector.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        {
            var noneRecord = await client.Select<Vector4Record>(("vector", "none"));
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().BeNull();
        }

        {
            Func<Task> act = async () => await client.Select<Vector4Record>(("vector", "empty"));

            await act.Should()
                .ThrowAsync<CborException>()
                .WithMessage("Expected a CBOR array with at least 4 elements");
        }

        {
            Func<Task> act = async () => await client.Select<Vector4Record>(("vector", "vector2"));

            await act.Should()
                .ThrowAsync<CborException>()
                .WithMessage("Expected a CBOR array with at least 4 elements");
        }

        {
            Func<Task> act = async () => await client.Select<Vector4Record>(("vector", "vector3"));

            await act.Should()
                .ThrowAsync<CborException>()
                .WithMessage("Expected a CBOR array with at least 4 elements");
        }

        {
            var vector4Record = await client.Select<Vector4Record>(("vector", "vector4"));
            vector4Record.Should().NotBeNull();
            vector4Record!.Value.Should().Be(new Vector4(2, 3, 4, 5));
        }
    }

    [Theory]
    [InlineData("Endpoint=mem://")]
    [InlineData("Endpoint=http://127.0.0.1:8000;User=root;Pass=root")]
    [InlineData("Endpoint=ws://127.0.0.1:8000/rpc;User=root;Pass=root")]
    public async Task ShouldParseNone(string connectionString)
    {
        await using var surrealDbClientGenerator = new SurrealDbClientGenerator();
        var dbInfo = surrealDbClientGenerator.GenerateDatabaseInfo();

        string filePath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "Schemas/string.surql"
        );
        string fileContent = File.ReadAllText(filePath, Encoding.UTF8);

        string query = fileContent;

        using var client = surrealDbClientGenerator.Create(connectionString);
        await client.Use(dbInfo.Namespace, dbInfo.Database);

        await client.RawQuery(query);

        {
            var noneRecord = await client.Select<NoneRecord>(("string", "none"));
            noneRecord.Should().NotBeNull();
            noneRecord!.Value.Should().Be(new None());
        }

        {
            var act = async () => await client.Select<NoneRecord>(("string", "unicode"));
            await act.Should()
                .ThrowAsync<CborException>()
                .WithMessage("Expected a CBOR type of NONE");
        }
    }
}
